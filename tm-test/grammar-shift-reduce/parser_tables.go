// generated by Textmapper; DO NOT EDIT

package grammar

import (
	"fmt"
)

// Symbol represents a set of all terminal and non-terminal symbols of the skr language.
type Symbol int

var symbolStr = [...]string{
	"BindingIdentifier",
	"PredefinedType",
	"LiteralType",
	"Type",
	"PrimaryType",
	"ParameterList_optlist",
	"StructType",
	"InterfaceItem_optlist",
	"InterfaceType",
	"InterfaceItem",
	"FunctionType",
	"FunctionInfo",
	"ParameterList_list_Comma_separated",
	"ParameterList_list_Comma_separated_opt",
	"BindingIdentifier_list_Comma_separated",
	"ParameterList",
	"RetList",
	"Type_list_Comma_separated",
}

func (n Symbol) String() string {
	if n < Symbol(NumTokens) {
		return Token(n).String()
	}
	i := int(n) - int(NumTokens)
	if i < len(symbolStr) {
		return symbolStr[i]
	}
	return fmt.Sprintf("nonterminal(%d)", n)
}

var tmAction = []int32{
	-1, 0, -1, -1, -1, 1, 2, 3, 4, 5, 6, 8, 9, 7, 10, 11, 12, -3, -9, 20, -15,
	-1, 28, -21, -1, -1, 24, -1, 15, 13, -1, -27, -1, 29, 18, -1, 16, 23, -1, 30,
	21, 27, 19, 33, -1, 31, -1, 32, -1, -2,
}

var tmLalr = []int32{
	6, 14, 94, 14, -1, -2, 6, -1, 96, 26, -1, -2, 6, 17, 94, 17, -1, -2, 103, -1,
	96, 25, -1, -2, 6, -1, 12, -1, 29, -1, 57, -1, 71, -1, 72, -1, 73, -1, 74,
	-1, 77, -1, 95, -1, 0, 22, 94, 22, 96, 22, 103, 22, -1, -2,
}

var tmGoto = []int32{
	0, 2, 2, 2, 2, 2, 2, 22, 22, 22, 22, 22, 22, 32, 32, 32, 32, 32, 32, 32, 32,
	32, 32, 32, 32, 32, 32, 32, 32, 32, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 62, 72, 82, 92, 92, 92,
	102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
	102, 106, 110, 116, 120, 120, 120, 120, 120, 120, 120, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126,
	126, 126, 126, 146, 156, 166, 176, 186, 188, 198, 200, 210, 212, 222, 226,
	228, 230, 236, 242, 244, 246,
}

var tmFromTo = []int8{
	48, 49, 0, 1, 18, 1, 21, 1, 25, 1, 27, 1, 30, 1, 31, 1, 32, 1, 38, 1, 46, 1,
	0, 2, 25, 2, 31, 2, 38, 2, 46, 2, 0, 3, 25, 3, 31, 3, 38, 3, 46, 3, 0, 4, 25,
	4, 31, 4, 38, 4, 46, 4, 0, 5, 25, 5, 31, 5, 38, 5, 46, 5, 0, 6, 25, 6, 31, 6,
	38, 6, 46, 6, 0, 7, 25, 7, 31, 7, 38, 7, 46, 7, 0, 8, 25, 8, 31, 8, 38, 8,
	46, 8, 0, 9, 25, 9, 31, 9, 38, 9, 46, 9, 2, 17, 4, 20, 21, 28, 27, 34, 3, 18,
	31, 38, 35, 18, 24, 31, 44, 45, 23, 30, 25, 32, 44, 46, 0, 10, 18, 22, 21,
	22, 25, 10, 27, 35, 30, 22, 31, 10, 32, 41, 38, 10, 46, 10, 0, 11, 25, 11,
	31, 11, 38, 11, 46, 11, 0, 12, 25, 12, 31, 12, 38, 12, 46, 12, 0, 48, 25, 33,
	31, 39, 38, 43, 46, 47, 0, 13, 25, 13, 31, 13, 38, 13, 46, 13, 17, 21, 0, 14,
	25, 14, 31, 14, 38, 14, 46, 14, 20, 27, 0, 15, 25, 15, 31, 15, 38, 15, 46,
	15, 27, 36, 0, 16, 25, 16, 31, 16, 38, 16, 46, 16, 3, 19, 35, 42, 18, 23, 18,
	24, 18, 25, 21, 25, 30, 25, 18, 26, 21, 29, 30, 37, 31, 40, 38, 44,
}

var tmRuleLen = []int8{
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 4, 2, 0, 4, 2, 2, 4, 3, 3, 1, 1,
	0, 3, 1, 2, 1, 3, 3, 1,
}

var tmRuleSymbol = []int32{
	155, 156, 156, 156, 156, 156, 157, 158, 159, 159, 159, 159, 159, 160, 160,
	161, 162, 162, 163, 164, 165, 166, 166, 167, 167, 168, 168, 169, 169, 170,
	171, 171, 172, 172,
}

// set(follow error) = 
var afterErr = []int32{
}
